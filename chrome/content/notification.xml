<?xml version="1.0"?>

<!DOCTYPE bindings [
<!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
%notificationDTD;
<!ENTITY % weaveNotificationDTD SYSTEM "chrome://weave/locale/notification.dtd">
%weaveNotificationDTD;
]>

<bindings id="notificationBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="notificationbox" extends="chrome://global/content/bindings/notification.xml#notificationbox">
    <content>
      <xul:vbox xbl:inherits="hidden=notificationshidden">
        <xul:spacer/>
        <children includes="notification"/>
      </xul:vbox>
      <children/>
    </content>

    <implementation>

<!-- FIXME: instantiate this._log for all objects -->

      <constructor><![CDATA[
        const Cc = Components.classes;
        const Ci = Components.interfaces;
        const Cr = Components.results;
        const Cu = Components.utils;

        Cu.import("resource://weave/Observers.js");
        Cu.import("resource://weave/notifications.js");
        Cu.import("resource://weave/service.js");

        // Register the notification box as an observer of notification changes.
        // FIXME: make Observers accept an object, pass it "this", then
        // implement "observe" in this object and make it call
        // onNotificationAdded and onNotificationRemoved instead of using these
        // helper functions, so we can remove the observer on destruction.
        var self = this;
        Observers.add(function(s, t, d) { self.onNotificationAdded(s, t, d) },
                      "weave:notification:added");
        Observers.add(function(s, t, d) { self.onNotificationRemoved(s, t, d) },
                      "weave:notification:removed");

        for each (var notification in Notifications.notifications)
          this._appendNotification(notification);
      ]]></constructor>

      <destructor><![CDATA[
        //Observers.remove(this.onNotificationAdded, "weave:notification:added");
        //Observers.remove(this.onNotificationRemoved, "weave:notification:removed");
      ]]></destructor>

      <method name="onNotificationAdded">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body><![CDATA[
          this._appendNotification(subject);
        ]]></body>
      </method>

      <method name="onNotificationRemoved">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body><![CDATA[
          // If the view of the notification hasn't been removed yet, remove it.
          var notifications = this.allNotifications;
          for each (var notification in notifications) {
            if (notification == subject) {
              notification.close();
              break;
            }
          }

          // If the user has just closed the last notification, close the panel.
          // FIXME: this is not quite right, because it might not have been
          // the user that caused weave:notification:removed to get called.
          // We need to differentiate between "notification removed" and "user
          // closed the notification" and only close the panel if it was
          // the user who closed the last notification.  Maybe we should make
          // the notification's close method handle closing the panel,
          // but should the notification box or its notifications really know
          // they are located inside the panel?
          var panel = document.getElementById("sync-notifications-panel");
          if (panel.state == "open" && Notifications.notifications.length == 0)
            panel.hidePopup();

        ]]></body>
      </method>

      <method name="_appendNotification">
        <parameter name="notification"/>
        <body><![CDATA[
          var node = this.appendNotification(notification.title,
                                             notification.description,
                                             notification.iconURL,
                                             notification.priority,
                                             notification.buttons);
          node.className = notification.constructor.name;
          node.notification = notification;
        ]]></body>
      </method>

    </implementation>
  </binding>

  <binding id="notification" extends="chrome://global/content/bindings/notification.xml#notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type" align="start">
        <xul:image anonid="messageImage" class="messageImage" xbl:inherits="src=image" style="padding: 3px;"/>
        <xul:vbox flex="1">
          <xul:hbox anonid="details" align="center" flex="1">
            <xul:description anonid="messageText" class="messageText" flex="1" xbl:inherits="xbl:text=label"/>
            <xul:spacer flex="1"/>
          </xul:hbox>
          <xul:description xbl:inherits="xbl:text=value"/>

          <!-- The children are the buttons defined by the notification. -->
          <xul:hbox oncommand="document.getBindingParent(this)._doButtonCommand(event);">
            <xul:spacer flex="1"/>
            <children/>
          </xul:hbox>

        </xul:vbox>
        <xul:spacer flex="1"/>
        <xul:toolbarbutton ondblclick="event.stopPropagation();"
                           class="messageCloseButton tabbable"
                           xbl:inherits="hidden=hideclose"
                           tooltiptext="&closeNotification.tooltip;"
                           oncommand="document.getBindingParent(this).close()"/>
      </xul:hbox>
    </content>
    <implementation>
      <!-- Note: this used to be a field, but for some reason it kept getting
         - reset to its default value for TabNotification elements.
         - As a property, that doesn't happen, even though the property stores
         - its value in a JS property |_notification| that is not defined
         - in XBL as a field or property.  Maybe this is wrong, but it works.
         -->
      <property name="notification"
                onget="return this._notification"
                onset="this._notification = val; return val;"/>
      <method name="close">
        <body><![CDATA[
          Notifications.remove(this.notification);

          // We should be able to call the base class's close method here
          // to remove the notification element from the notification box,
          // but we can't because of bug 373652, so instead we copied its code
          // and execute it below.
          var control = this.control;
          if (control)
            control.removeNotification(this);
          else
            this.hidden = true;
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="TabsNotification" extends="chrome://weave/content/notification.xml#notification">
    <content>
      <xul:hbox class="notification-inner outset" flex="1" xbl:inherits="type" align="start">
        <xul:image anonid="messageImage" class="messageImage" xbl:inherits="src=image"/>
        <xul:vbox flex="1">
          <xul:hbox anonid="details" align="center" flex="1">
            <xul:description anonid="messageText" class="messageText" flex="1">
              &syncTabsPanel.title;
            </xul:description>
            <xul:spacer flex="1"/>
          </xul:hbox>
          <xul:description>
            &syncTabsPanel.description;
          </xul:description>
          <xul:listbox anonid="sync-tabs-list"/>
          <xul:hbox>
            <xul:spacer flex="1"/>
            <xul:button label="&syncTabsButton.label;"
                        oncommand="document.getBindingParent(this)._doSyncTabs();
                                   document.getBindingParent(this).close();"/>
            <children/>
          </xul:hbox>
        </xul:vbox>
        <xul:toolbarbutton class="messageCloseButton tabbable"
                           xbl:inherits="hidden=hideclose"
                           tooltiptext="&closeNotification.tooltip;"
                           ondblclick="event.stopPropagation();"
                           oncommand="document.getBindingParent(this).close()"/>
      </xul:hbox>
    </content>
    <implementation>
      <constructor>
        this._initTabsPanel();
      </constructor>

      <field name="_sessionStore" readonly="true">
        Cc["@mozilla.org/browser/sessionstore;1"].getService(Ci.nsISessionStore);
      </field>

      <field name="_json" readonly="true">
        Cc["@mozilla.org/dom/json;1"].createInstance(Ci.nsIJSON);
      </field>

      <!-- FIXME: refactor this function with the identical one in sync.js. -->
      <method name="_getSortedVirtualTabs">
        <body><![CDATA[
          var virtualTabs = Weave.Engines.get("tabs").store.virtualTabs;

          // Convert the hash of virtual tabs indexed by ID into an array
          // of virtual tabs whose ID is stored in an ID property.
          virtualTabs =
            [(virtualTabs[id].id = id) && virtualTabs[id] for (id in virtualTabs)];

          // Sort virtual tabs by their position in their windows.
          // Note: we don't actually group by window first, so all first tabs
          // will appear first in the list, followed by all second tabs, and so on.
          // FIXME: group by window, even though we aren't opening them up that way,
          // so the list better resembles the pattern the user remembers.
          virtualTabs.sort(function(a, b) a.position > b.position ?  1 :
                                          a.position < b.position ? -1 : 0);
      
          return virtualTabs;
        ]]></body>
      </method>

      <method name="_initTabsPanel">
        <body><![CDATA[
          var list = document.getAnonymousElementByAttribute(this, "anonid", "sync-tabs-list");

          var virtualTabs = this._getSortedVirtualTabs();
      
          // Remove virtual tabs that have previously been disposed of by the user.
          virtualTabs = virtualTabs.filter(function(v) !v._disposed);
      
          while (list.hasChildNodes())
            list.removeChild(list.lastChild);
      
          var numItems = 0;
          for each (var virtualTab in virtualTabs) {
            var currentEntry = virtualTab.state.entries[virtualTab.state.index - 1];
            if (!currentEntry || !currentEntry.url) {
              this._log.warn("doInitTabsPanel: no current entry or no URL, can't " +
                             "identify " + this._json.encode(virtualTab));
              continue;
            }
      
            var label = currentEntry.title ? currentEntry.title : currentEntry.url;
            var listitem = list.appendItem(label, virtualTab.id);
            listitem.setAttribute("type", "checkbox");
            // Make a tooltip that contains either or both of the title and URL.
            listitem.tooltipText =
              [currentEntry.title, currentEntry.url].filter(function(v) v).join("\n");

            ++numItems;
          }

          // Resize the list to the number of items (up to ten).  We should
          // be able to set this via CSS |height: auto; max-height: something|,
          // but that doesn't work (the list is slightly shorter than it needs
          // to be and keeps resizing, perhaps from bug 413336 and/or 261411).
          list.setAttribute("rows", numItems > 10 ? 10 : numItems);
        ]]></body>
      </method>

      <method name="_doSyncTabs">
        <body><![CDATA[
          var list = document.getAnonymousElementByAttribute(this, "anonid", "sync-tabs-list");
          var virtualTabs = Weave.Engines.get("tabs").store.virtualTabs;

          for (var i = 0; i < list.childNodes.length; i++) {
            var listitem = list.childNodes[i];
            var virtualTab = virtualTabs[listitem.value];
            if (!virtualTab) {
              // FIXME: warn about the virtual tab having gone away.
              // FIXME: figure out why virtual tabs sometimes go away
              // and what to do about it.
              continue;
            }
            if (listitem.checked) {
              var tab = gBrowser.addTab("about:blank");
              this._sessionStore.setTabState(tab, this._json.encode(virtualTab.state));
              delete virtualTabs[listitem.value];
            }
            else {
              // Mark the tab disposed of by the user so we don't show it the next
              // time the user opens the sync tabs panel.  Note: this flag does not
              // get synced to the server, so disposal happens on each client
              // separately, which means the user will still be prompted about this
              // tab when syncing to a third client.
              virtualTab._disposed = true;
            }
          }

          Weave.Engines.get("tabs").store.virtualTabs = virtualTabs;
        ]]></body>
      </method>

    </implementation>
  </binding>

</bindings>
